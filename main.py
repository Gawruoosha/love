
from pyrogram import Client, filters
from pyrogram.errors import FloodWait
from pyrogram.raw import functions

from time import sleep


app = Client("my_account")

@app.on_message(filters.command("l", prefixes="-") & filters.me)
def heartt(_, msg):
  while True:
    try:
      for frame in l:
        msg.edit(frame)
        sleep(0.1)

    except FloodWait as e:
      sleep(e.x)
l = [
r""".
                 11111111      111111111
          111111111111  1111111    1111
       111111111111111111111111    111
       111111111111111111111111    111
       111111111111111111111111    111
          1111111111111111111111    111
              11111111111111111111111
                    11111111111111111
                         1111111111111
                               1111111
                                   111
                                     1
""", r""".
                 11111      111111
          111111111  1111    1111
       111111111111111111    111
       111111111111111111    111
       111111111111111111    111
          1111111111111111    111
              11111111111111111
                  1111111111111
                        11111111
                           11111
                             111
                               1
""", r""".
                 111      1111
          1111111  11    1111
      11111111111111    111
      11111111111111    111   
      11111111111111    111
         111111111111    111
            1111111111111
              11111111111
                   1111111
                     11111 
                       111 
                         1
""", r""".
                   1111
              11    1111
             11111    111
             11111    111
             11111    111
             1111    1111
               11111111
               11111111 
                 111111
                   1111  
                     11 
                      1
""", r""".
                 111      1111
          1111111  11    1111
      11111111111111    111
      11111111111111    111
      11111111111111    111
        111111111111    111
            1111111111111
              11111111111
                   1111111
                     11111 
                       111 
                         1
""", r""".
                 11111      111111
          111111111  1111    1111
      111111111111111111    111
      111111111111111111    111
      111111111111111111    111
        1111111111111111    111
            11111111111111111
                 1111111111111
                      11111111
                          11111
                            111
                              1
"""
]

@app.on_message(filters.command("feb", prefixes="-") & filters.me)
def heartt(_, msg):
  while True:
    try:
      for frame in feb:
        msg.edit(frame)
        sleep(0.5)

    except FloodWait as e:
      sleep(e.x)
feb = [
r"""
🤍🤍
🤍🤍
""", r"""
🤍🤍🤍
🤍🤍🤍
🤍🤍🤍
""", r"""
🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍
""", r"""
🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍
""", r"""
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
""", r"""
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍🤍❤️🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
""", r"""
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍❤️🤍❤️🤍🤍🤍
🤍🤍🤍❤️❤️❤️🤍🤍🤍
🤍🤍🤍🤍❤️🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
""", r"""
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍❤️🤍❤️🤍🤍🤍
🤍🤍❤️❤️❤️❤️❤️🤍🤍
🤍🤍❤️❤️❤️❤️❤️🤍🤍
🤍🤍🤍❤️❤️❤️🤍🤍🤍
🤍🤍🤍🤍❤️🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
""", r"""
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍❤️❤️🤍❤️❤️🤍🤍
🤍❤️❤️❤️❤️❤️❤️❤️🤍
🤍❤️❤️❤️❤️❤️❤️❤️🤍
🤍❤️❤️❤️❤️❤️❤️❤️🤍
🤍🤍❤️❤️❤️❤️❤️🤍🤍
🤍🤍🤍❤️❤️❤️🤍🤍🤍
🤍🤍🤍🤍❤️🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
""", r"""
🤍🤍❤️❤️🤍❤️❤️🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍❤️❤️🤍❤️❤️🤍🤍
🤍❤️❤️❤️❤️❤️❤️❤️🤍
🤍❤️❤️❤️❤️❤️❤️❤️🤍
🤍❤️❤️❤️❤️❤️❤️❤️🤍
🤍🤍❤️❤️❤️❤️❤️🤍🤍
🤍🤍🤍❤️❤️❤️🤍🤍🤍
🤍🤍🤍🤍❤️🤍🤍🤍🤍
""", r"""
🤍🤍❤️❤️🤍❤️❤️🤍🤍
🤍🤍❤️❤️🤍❤️❤️🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍❤️❤️🤍❤️❤️🤍🤍
🤍❤️❤️❤️❤️❤️❤️❤️🤍
🤍❤️❤️❤️❤️❤️❤️❤️🤍
🤍❤️❤️❤️❤️❤️❤️❤️🤍
🤍🤍❤️❤️❤️❤️❤️🤍🤍
🤍🤍🤍❤️❤️❤️🤍🤍🤍
""", r"""
🤍🤍❤️❤️❤️❤️❤️🤍🤍
🤍🤍❤️❤️🤍❤️❤️🤍🤍
🤍🤍❤️❤️🤍❤️❤️🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍❤️❤️🤍❤️❤️🤍🤍
🤍❤️❤️❤️❤️❤️❤️❤️🤍
🤍❤️❤️❤️❤️❤️❤️❤️🤍
🤍❤️❤️❤️❤️❤️❤️❤️🤍
🤍🤍❤️❤️❤️❤️❤️🤍🤍
""", r"""
🤍🤍❤️❤️🤍❤️❤️🤍🤍
🤍🤍❤️❤️❤️❤️❤️🤍🤍
🤍🤍❤️❤️🤍❤️❤️🤍🤍
🤍🤍❤️❤️🤍❤️❤️🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍❤️❤️🤍❤️❤️🤍🤍
🤍❤️❤️❤️❤️❤️❤️❤️🤍
🤍❤️❤️❤️❤️❤️❤️❤️🤍
🤍❤️❤️❤️❤️❤️❤️❤️🤍
""", r"""
🤍🤍❤️❤️🤍❤️❤️🤍🤍
🤍🤍❤️❤️🤍❤️❤️🤍🤍
🤍🤍❤️❤️❤️❤️❤️🤍🤍
🤍🤍❤️❤️🤍❤️❤️🤍🤍
🤍🤍❤️❤️🤍❤️❤️🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍❤️❤️🤍❤️❤️🤍🤍
🤍❤️❤️❤️❤️❤️❤️❤️🤍
🤍❤️❤️❤️❤️❤️❤️❤️🤍
""", r"""
🤍🤍❤️❤️❤️❤️❤️🤍🤍
🤍🤍❤️❤️🤍❤️❤️🤍🤍
🤍🤍❤️❤️🤍❤️❤️🤍🤍
🤍🤍❤️❤️❤️❤️❤️🤍🤍
🤍🤍❤️❤️🤍❤️❤️🤍🤍
🤍🤍❤️❤️🤍❤️❤️🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍❤️❤️🤍❤️❤️🤍🤍
🤍❤️❤️❤️❤️❤️❤️❤️🤍
""", r"""
🤍🤍🤍❤️❤️❤️🤍🤍🤍
🤍🤍❤️❤️❤️❤️❤️🤍🤍
🤍🤍❤️❤️🤍❤️❤️🤍🤍
🤍🤍❤️❤️🤍❤️❤️🤍🤍
🤍🤍❤️❤️❤️❤️❤️🤍🤍
🤍🤍❤️❤️🤍❤️❤️🤍🤍
🤍🤍❤️❤️🤍❤️❤️🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
""", r"""
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍❤️❤️❤️🤍🤍🤍
🤍🤍❤️❤️❤️❤️❤️🤍🤍
🤍🤍❤️❤️🤍❤️❤️🤍🤍
🤍🤍❤️❤️🤍❤️❤️🤍🤍
🤍🤍❤️❤️❤️❤️❤️🤍🤍
🤍🤍❤️❤️🤍❤️❤️🤍🤍
🤍🤍❤️❤️🤍❤️❤️🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
""", r"""
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍❤️❤️🤍🤍🤍❤️❤️🤍
🤍❤️❤️❤️🤍❤️❤️❤️🤍
🤍❤️❤️❤️❤️❤️❤️❤️🤍
🤍❤️❤️❤️❤️❤️❤️❤️🤍
🤍❤️❤️🤍❤️🤍❤️❤️🤍
🤍❤️❤️🤍🤍🤍❤️❤️🤍
🤍❤️❤️🤍🤍🤍❤️❤️🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
""", r"""
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍❤️❤️❤️🤍🤍🤍
🤍🤍🤍❤️❤️❤️🤍🤍🤍
🤍🤍🤍❤️❤️❤️🤍🤍🤍
🤍🤍🤍❤️❤️❤️🤍🤍🤍
🤍🤍🤍❤️❤️❤️🤍🤍🤍
🤍🤍🤍❤️❤️❤️🤍🤍🤍
🤍🤍🤍❤️❤️❤️🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
""", r"""
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍❤️❤️🤍🤍🤍❤️❤️🤍
🤍❤️❤️❤️🤍🤍❤️❤️🤍
🤍❤️❤️❤️❤️🤍❤️❤️🤍
🤍❤️❤️❤️❤️❤️❤️❤️🤍
🤍❤️❤️🤍❤️❤️❤️❤️🤍
🤍❤️❤️🤍🤍❤️❤️❤️🤍
🤍❤️❤️🤍🤍🤍❤️❤️🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
""", r"""
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍❤️❤️❤️🤍🤍🤍
🤍🤍❤️❤️❤️❤️❤️🤍🤍
🤍🤍❤️❤️🤍❤️❤️🤍🤍
🤍🤍❤️❤️🤍❤️❤️🤍🤍
🤍🤍❤️❤️❤️❤️❤️🤍🤍
🤍🤍❤️❤️🤍❤️❤️🤍🤍
🤍🤍❤️❤️🤍❤️❤️🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
""", r"""
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
""", r"""
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍❤️❤️❤️🤍🤍🤍
🤍🤍🤍❤️❤️❤️🤍🤍🤍
🤍🤍🤍❤️❤️❤️🤍🤍🤍
🤍🤍🤍❤️❤️❤️🤍🤍🤍
🤍🤍🤍❤️❤️❤️🤍🤍🤍
🤍🤍🤍❤️❤️❤️🤍🤍🤍
🤍🤍🤍❤️❤️❤️🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
""", r"""
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
""", r"""
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍❤️❤️🤍🤍🤍🤍🤍
🤍🤍❤️❤️🤍🤍🤍🤍🤍
🤍🤍❤️❤️🤍🤍🤍🤍🤍
🤍🤍❤️❤️🤍🤍🤍🤍🤍
🤍🤍❤️❤️🤍🤍🤍🤍🤍
🤍🤍❤️❤️❤️❤️❤️🤍🤍
🤍🤍❤️❤️❤️❤️❤️🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
""", r"""
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍❤️❤️❤️❤️❤️🤍🤍
🤍❤️❤️❤️❤️❤️❤️❤️🤍
🤍❤️❤️🤍🤍🤍❤️❤️🤍
🤍❤️❤️🤍🤍🤍❤️❤️🤍
🤍❤️❤️🤍🤍🤍❤️❤️🤍
🤍❤️❤️❤️❤️❤️❤️❤️🤍
🤍🤍❤️❤️❤️❤️❤️🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
""", r"""
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍❤️❤️🤍🤍🤍❤️❤️🤍
🤍❤️❤️🤍🤍🤍❤️❤️🤍
🤍❤️❤️❤️🤍❤️❤️❤️🤍
🤍🤍❤️❤️🤍❤️❤️🤍🤍
🤍🤍❤️❤️🤍❤️❤️🤍🤍
🤍🤍❤️❤️❤️❤️❤️🤍🤍
🤍🤍🤍❤️❤️❤️🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
""", r"""
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍❤️❤️❤️❤️❤️❤️🤍🤍
🤍❤️❤️❤️❤️❤️❤️🤍🤍
🤍❤️❤️🤍🤍🤍🤍🤍🤍
🤍❤️❤️❤️❤️❤️❤️🤍🤍
🤍❤️❤️❤️❤️❤️❤️🤍🤍
🤍❤️❤️🤍🤍🤍🤍🤍🤍
🤍❤️❤️❤️❤️❤️❤️🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
""", r"""
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
""", r"""
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍❤️❤️🤍🤍🤍❤️❤️🤍
🤍❤️❤️🤍🤍🤍❤️❤️🤍
🤍❤️❤️🤍🤍🤍❤️❤️🤍
🤍🤍❤️❤️🤍❤️❤️🤍🤍
🤍🤍🤍❤️❤️❤️🤍🤍🤍
🤍🤍🤍❤️❤️❤️🤍🤍🤍
🤍🤍🤍❤️❤️❤️🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
""", r"""
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍❤️❤️❤️❤️❤️🤍🤍
🤍❤️❤️❤️❤️❤️❤️❤️🤍
🤍❤️❤️🤍🤍🤍❤️❤️🤍
🤍❤️❤️🤍🤍🤍❤️❤️🤍
🤍❤️❤️🤍🤍🤍❤️❤️🤍
🤍❤️❤️❤️❤️❤️❤️❤️🤍
🤍🤍❤️❤️❤️❤️❤️🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
""", r"""
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍❤️❤️🤍🤍🤍❤️❤️🤍
🤍❤️❤️🤍🤍🤍❤️❤️🤍
🤍❤️❤️🤍🤍🤍❤️❤️🤍
🤍❤️❤️🤍🤍🤍❤️❤️🤍
🤍❤️❤️❤️🤍❤️❤️❤️🤍
🤍❤️❤️❤️❤️❤️❤️❤️🤍
🤍🤍❤️❤️❤️❤️❤️🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
""", r"""
🤍🤍🤍🤍🤍🤍🤍🤍🤍
🤍🤍❤️❤️🤍❤️❤️🤍🤍
🤍❤️❤️❤️❤️❤️❤️❤️🤍
🤍❤️❤️❤️❤️❤️❤️❤️🤍
🤍❤️❤️❤️❤️❤️❤️❤️🤍
🤍🤍❤️❤️❤️❤️❤️🤍🤍
🤍🤍🤍❤️❤️❤️🤍🤍🤍
🤍🤍🤍🤍❤️🤍🤍🤍🤍
🤍🤍🤍🤍🤍🤍🤍🤍🤍
""", r"""
🤍🤍💙💙🤍💙💙🤍🤍
🤍💙❤️❤️💙❤️❤️💙🤍
💙❤️❤️❤️❤️❤️❤️❤️💙
💙❤️❤️❤️❤️❤️❤️❤️💙
💙❤️❤️❤️❤️❤️❤️❤️💙
🤍💙❤️❤️❤️❤️❤️💙🤍
🤍🤍💙❤️❤️❤️💙🤍🤍
🤍🤍🤍💙❤️💙🤍🤍🤍
🤍🤍🤍🤍💙🤍🤍🤍🤍
""", r"""
🤍💙💙💙💙💙💙💙🤍
💙💙❤️❤️💙❤️❤️💙💙
💙❤️❤️❤️❤️❤️❤️❤️💙
💙❤️❤️❤️❤️❤️❤️❤️💙
💙❤️❤️❤️❤️❤️❤️❤️💙
💙💙❤️❤️❤️❤️❤️💙💙
🤍💙💙❤️❤️❤️💙💙🤍
🤍🤍💙💙❤️💙💙🤍🤍
🤍🤍🤍💙💙💙🤍🤍🤍
""", r"""
💙💙💙💙💙💙💙💙💙
💙💙❤️❤️💙❤️❤️💙💙
💙❤️❤️❤️❤️❤️❤️❤️💙
💙❤️❤️❤️❤️❤️❤️❤️💙
💙❤️❤️❤️❤️❤️❤️❤️💙
💙💙❤️❤️❤️❤️❤️💙💙
💙💙💙❤️❤️❤️💙💙💙
🤍💙💙💙❤️💙💙💙🤍
🤍🤍💙💙💙💙💙🤍🤍
""", r"""
💙💙💙💙💙💙💙💙💙
💙💙❤️❤️💙❤️❤️💙💙
💙❤️❤️❤️❤️❤️❤️❤️💙
💙❤️❤️❤️❤️❤️❤️❤️💙
💙❤️❤️❤️❤️❤️❤️❤️💙
💙💙❤️❤️❤️❤️❤️💙💙
💙💙💙❤️❤️❤️💙💙💙
💙💙💙💙❤️💙💙💙💙
💙💙💙💙💙💙💙💙💙
""", r"""
💙💙💙💙💙💙💙💙💙
💙💙💙💙💙💙💙💙💙
💙💙💙❤️💙❤️💙💙💙
💙💙❤️❤️❤️❤️❤️💙💙
💙💙❤️❤️❤️❤️❤️💙💙
💙💙💙❤️❤️❤️💙💙💙
💙💙💙💙❤️💙💙💙💙
💙💙💙💙💙💙💙💙💙
💙💙💙💙💙💙💙💙💙
""", r"""
💙💙💙💙💙💙💙💙💙
💙💙💙💙💙💙💙💙💙
💙💙💙💙💙💙💙💙💙
💙💙💙❤️💙❤️💙💙💙
💙💙💙❤️❤️❤️💙💙💙
💙💙💙💙❤️💙💙💙💙
💙💙💙💙💙💙💙💙💙
💙💙💙💙💙💙💙💙💙
💙💙💙💙💙💙💙💙💙
""", r"""
💙💙💙💙💙💙💙💙💙
💙💙💙💙💙💙💙💙💙
💙💙💙💙💙💙💙💙💙
💙💙💙💙💙💙💙💙💙
💙💙💙💙❤️💙💙💙💙
💙💙💙💙💙💙💙💙💙
💙💙💙💙💙💙💙💙💙
💙💙💙💙💙💙💙💙💙
💙💙💙💙💙💙💙💙💙
""", r"""
💙💙💙💙💙💙💙💙💙
💙💙💙💙💙💙💙💙💙
💙💙💙💙💙💙💙💙💙
💙💙💙💙💙💙💙💙💙
💙💙💙💙💙💙💙💙💙
💙💙💙💙💙💙💙💙💙
💙💙💙💙💙💙💙💙💙
💙💙💙💙💙💙💙💙💙
💙💙💙💙💙💙💙💙💙
""", r"""
💙💙💙💙💙💙💙💙💙
💙💙💙💙💙💙💙💙💙
💙💙💙💙💙💙💙💙💙
💙💙💙💙💙💙💙💙💙
💙💙💙💙💙💙💙💙💙
💙💙💙💙💙💙💙💙💙
💙💙💙💙💙💙💙💙💙
💙💙💙💙💙💙💙💙💙
""", r"""
💙💙💙💙💙💙💙💙💙
💙💙💙💙💙💙💙💙💙
💙💙💙💙💙💙💙💙💙
💙💙💙💙💙💙💙💙💙
💙💙💙💙💙💙💙💙💙
💙💙💙💙💙💙💙💙💙
💙💙💙💙💙💙💙💙💙
""", r"""
💙💙💙💙💙💙💙💙💙
💙💙💙💙💙💙💙💙💙
💙💙💙💙💙💙💙💙💙
💙💙💙💙💙💙💙💙💙
💙💙💙💙💙💙💙💙💙
💙💙💙💙💙💙💙💙💙
""", r"""
💙💙💙💙💙💙💙💙💙
💙💙💙💙💙💙💙💙💙
💙💙💙💙💙💙💙💙💙
💙💙💙💙💙💙💙💙💙
💙💙💙💙💙💙💙💙💙
""", r"""
💙💙💙💙💙💙💙💙💙
💙💙💙💙💙💙💙💙💙
💙💙💙💙💙💙💙💙💙
💙💙💙💙💙💙💙💙💙
""", r"""
💙💙💙💙💙💙💙💙💙
💙💙💙💙💙💙💙💙💙
💙💙💙💙💙💙💙💙💙
""", r"""
💙💙💙💙💙💙💙💙💙
💙💙💙💙💙💙💙💙💙
""", r"""
💙💙💙💙💙💙💙💙💙
""", r"""
I
""", r"""
I l
""", r"""
I lo
""", r"""
I lov
""", r"""
I love
""", r"""
I love y
""", r"""
I love yo
""", r"""
I love you
""", r"""
I love you,
""", r"""
I love you, s
""", r"""
I love you, si
""", r"""
I love you, sin
""", r"""
I love you, sinc
""", r"""
I love you, since
""", r"""
I love you, since F
""", r"""
I love you, since Fe
""", r"""
I love you, since Feb
""", r"""
I love you, since Febr
""", r"""
I love you, since Febru
""", r"""
I love you, since Februa
""", r"""
I love you, since Februar
""", r"""
I love you, since February
""", r"""
I love you, since February 1
""", r"""
I love you, since February 14
""", r"""
I love you, since February 14,
""", r"""
I love you, since February 14, m
""", r"""
I love you, since February 14, my
""", r"""
I love you, since February 14, my l
""", r"""
I love you, since February 14, my lo
""", r"""
I love you, since February 14, my lov
""", r"""
I love you, since February 14, my love
""", r"""
I love you, since February 14, my love ❤️
""", r"""
I love you, since February 14, my love ❤️

— Senya
"""
]

REPLACEMENT_MAP = {
    "a": "ɐ",
    "b": "q",
    "c": "ɔ",
    "d": "p",
    "e": "ǝ",
    "f": "ɟ",
    "g": "ƃ",
    "h": "ɥ",
    "i": "ᴉ",
    "j": "ɾ",
    "k": "ʞ",
    "l": "l",
    "m": "ɯ",
    "n": "u",
    "o": "o",
    "p": "d",
    "q": "b",
    "r": "ɹ",
    "s": "s",
    "t": "ʇ",
    "u": "n",
    "v": "ʌ",
    "w": "ʍ",
    "x": "x",
    "y": "ʎ",
    "z": "z",
    "A": "∀",
    "B": "B",
    "C": "Ɔ",
    "D": "D",
    "E": "Ǝ",
    "F": "Ⅎ",
    "G": "פ",
    "H": "H",
    "I": "I",
    "J": "ſ",
    "K": "K",
    "L": "˥",
    "M": "W",
    "N": "N",
    "O": "O",
    "P": "Ԁ",
    "Q": "Q",
    "R": "R",
    "S": "S",
    "T": "┴",
    "U": "∩",
    "V": "Λ",
    "W": "M",
    "X": "X",
    "Y": "⅄",
    "Z": "Z",
    "0": "0",
    "1": "Ɩ",
    "2": "ᄅ",
    "3": "Ɛ",
    "4": "ㄣ",
    "5": "ϛ",
    "6": "9",
    "7": "ㄥ",
    "8": "8",
    "9": "6",
    ",": "'",
    ".": "˙",
    "?": "¿",
    "!": "¡",
    '"': ",,",
    "'": ",",
    "(": ")",
    ")": "(",
    "[": "]",
    "]": "[",
    "{": "}",
    "}": "{",
    "<": ">",
    ">": "<",
    "&": "⅋",
    "_": "‾",
}


@app.on_message(filters.command("flip", prefixes="-") & filters.me)
def flip(_, msg):
    text = msg.text.split("-flip", maxsplit=1)[1]
    final_str = ""
    for char in text:
        if char in REPLACEMENT_MAP.keys():
            new_char = REPLACEMENT_MAP[char]
        else:
            new_char = char
        final_str += new_char
    if text != final_str:
        msg.edit(final_str)
    else:
        msg.edit(text)


@app.on_message(filters.command("type", prefixes="-") & filters.me)
def type(_, msg):
  orig_text = msg.text.split("-type ", maxsplit=1)[1]
  text = orig_text
  tbp = ""  # to be printed
  typing_symbol = "▒"

  while (tbp != orig_text):
    try:
      msg.edit(tbp + typing_symbol)
      sleep(0.05)  # 50 ms

      tbp = tbp + text[0]
      text = text[1:]

      msg.edit(tbp)
      sleep(0.05)

    except FloodWait as e:
      sleep(e.x)


@app.on_message(filters.command("un", prefixes="."))
def unread_chat(app, message):
    message.delete()
    app.send(
        functions.messages.MarkDialogUnread(
            peer=app.resolve_peer(message.chat.id), unread=True
        )
    )


app.run()